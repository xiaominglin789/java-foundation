package com.xiaominglin789.charpter_04;

public class Ch_2_BitOperator {
  public static void main(String[] args) {
    // `&`按位与: 同位都为1 结果为1，否则为0
    // 正数: 补码 = 原码 =反码
    // 2 =补码=>   0...00000010
    // 3 =补码=>   0...00000011
    // 2&3 =补码=> 0...00000010 => 正数 = 2
    int s1 = 2&3;
    System.out.println(s1); // 2

    // `~`按位取反: 二进制为0->1
    // 负数: 反码=原码符号位不变,其他位取反
    //      补码=反码 + 1
    // -2 =原码=>  1...00000010
    // -2 =反码=>  11..11111101
    // -2 =补码=>  11..11111110
    // ~-2 =补码=> 00..00000001 => 正数 = 1
    int s2 = ~-2;
    System.out.println(s2); // 1

    // `~`按位取反: 二进制为0->1
    // 2 =补码=>  0...00000010
    // ~2 =补码=> 11..11111101 => 负数
    // ~2 补码=>原码=补码-1,符号位不变,其他位取反
    //           11..11111100
    //           10..00000011
    int s3 = ~2;
    System.out.println(s3); // -3

    // `|`按位或: 同位只要有一个为`1`,结果就为`1`; 否则为`0`
    // 2 =补码=>     0...00000010
    // 3 =补码=>     0...00000011
    // 2|3 =补码=> 0...00000011 => 正数 = 3
    int s4 = 2|3;
    System.out.println(s4); // 3

    // `^`按位异或: 同位一个为`0`、一个为`1`,结果才为`1`; 否则为`0`
    // 2 =补码=>     0...00000010
    // 3 =补码=>     0...00000011
    // 2^3 =补码=> 0...00000001 => 正数 = 1
    int s5 = 2^3;
    System.out.println(s5); // 1

    /**
     `<<` ：左移, 值放大2的n次方倍。(二进制补码) 左移n位,符号位不变,低位补`0`.
     `>>` ：右移, 值缩小2的n次方倍。(二进制补码) 右移n位,位符号位不变。用补`符号位`来补高位。
     `>>>` ：无符号右移, 缩小2的n次方倍。不论正数还是负数，移位过程中高位均补`0`。
     */
    // 1    补码: 0...00000001
    // 1>>2 补码: 0  ...000000
    // 1>>2 补位: 000...000000
    int s6 = 1>>2;
    System.out.println(s6); // 0, 1 / 2x2 = 0

    // 1    补码:   0...00000001
    // 1<<2 补码: 0...00000001
    // 1<<2 补位: 0...0000000100
    int s7 = 1<<2;
    System.out.println(s7); // 4, 1 * 2x2 = 4
  }
}